%% 1) read in Ilastik file (for RGB file /membrane and nucleus)

addpath(genpath('E:\Ceren\Private\ilastik change test\Combined_New\7som_e1-upR-2'));
ilastik_filename = '191007_7som_647Ecad_488BcatNcad_e1-upR-2_Probabilities.h5';
ilastik_file = h5read(ilastik_filename,'/exported_data/');
pred = squeeze(ilastik_file(2,:,:,:));                                       
pred = permute(pred,[2,1,3]);          

figure
imshow(sum(pred,3),[])
title('Ilastik prediction map, z-projection')
%% 2) read in the original image
imagename_original = 'RGB.tif';
original_img = 0*pred;                                    
for z = 1 : size(pred,3)                                         
    temp = imread(imagename_original,z);        
    original_img(:,:,z) = temp(:,:,1);  
end                                                                                       
figure
imshow(sum(original_img,3),[])
title('original image, z-proj.')

%% Important input file:

%drag the Label2_WatershedMatrix.mat file (for this particular sample) into command line


%% Scale image dimensions script

AimedMag  = 0.1135; % pixel size in microns used to analyse the data;

nChan    = 6; % number of channels used
hybnum   = 1; %remember to change here !!
somite   = 7; %number of somites for the embryo
sample   = 'e1-upR-2';
scope    = 'dragonfly';%'olympus';
imageName_allDots = '190917_7som_hyb1_e1-upR-2.ome.tif';
scaleFactorX      = 1; % or AimedMag/dx;
scaleFactorZ      = 1;

% settings of the two different types of images. These values might need to
% be changed, depending on the acquisition used.
if strcmp(scope,'dragonfly')
    mag = 63;
    pixelSize = 0.184;     % in microns;
    dx  = pixelSize/mag;
    dz  = 0.356;           % in microns
elseif strcmp(scope,'olympus')
    mag = 100;
    pixelSize = 13;   % in microns
    dx  = pixelSize/mag;
    dz  = .5;           % in microns 
end

stackSize = (length(imfinfo(imageName_allDots)))/nChan;
im_dots   = cell(1,nChan); % pre-allocating
for c = 1:nChan
    for z = 1:stackSize       
        if c < 6
            im_dots{c}(:,:,z) = (double(imread(imageName_allDots,c+(z-1)*nChan)));
        else
            im_dots{c}(:,:,z) = double(imread(imageName_allDots,c+(z-1)*nChan));
        end
    end
end

% scale the image to the Aimed PixelSize;
im_dots_scaled = cell(size(im_dots));
[X,Y] = meshgrid(1:scaleFactorX:size(im_dots{1},1),1:scaleFactorX:size(im_dots{1},2));
newNSlices = round(size(im_dots{1},3)/scaleFactorZ);
for c = 1 : nChan
    im_dots_scaled{c} = imresize(im_dots{c},1/scaleFactorX);
    scaled = imresize(permute(im_dots_scaled{c},[3,1,2]),[newNSlices,size(permute(im_dots_scaled{c},[3,1,2]),2)]);
    im_dots_scaled{c} = ipermute(scaled,[3,1,2]);
end

%%  Read the image with the nucleus and the membrane (unbinned) this is RGB.

imagename_RGB = 'RGB.tif';            % write there the RGB image name
RGB_StackSize = size(original_img,3); 
im_RGB = cell(1,2);                   % pre-allocating, as usual
for z = 1 : RGB_StackSize
    temp = imread(imagename_RGB,z);
    im_RGB{1}(:,:,z) = temp(:,:,1);   
end


%% Run this for each channel

for chan = 1
    ilastik_file_dots = h5read(sprintf('%dsom_hyb%d_%s_chan_%d_Probabilities.h5',somite,hybnum,sample,chan),'/exported_data/');
    pred = squeeze(ilastik_file_dots(2,:,:,:));  
    pred = permute(pred,[2,1,3]);
    image2 = pred>0.5;                      % threshold value(can be low typically .5 or .3)
    image2 = imrotate(image2,angle,'crop'); % rotates the segmentation 
    
    
    stats1 = regionprops(Label2(:,:,:),image2_shift,'centroid','area','MeanIntensity','PixelValues');

    points(chan).volume        = cat(1,stats1.Area);
    points(chan).centroid      = cat(1,stats1.Centroid);
    points(chan).MeanIntensity = cat(1,stats1.MeanIntensity);
    points(chan).Intensity     = points(chan).MeanIntensity.*points(chan).volume;

    stats2 = regionprops(Label2(:,:,:),im_dots_scaled{chan},'MeanIntensity');
    points(chan).MeanDotIntensity = cat(1,stats2.MeanIntensity);

    Label_dots = bwlabeln(1-image2_shift);  % in the thresholded ilastik prediction map, which was rotated and shifted,
    % we now look for connected groups of pixels. Each connected group gets a unique label, which we interpret as a hotspot. 
    
    stats1 = regionprops(Label2(:,:,:),Label_dots,'centroid','area','MeanIntensity','PixelValues'); 
    
    NSpots = zeros(size(stats1));     % pre-allocating
    for z = 1 : length(stats1)
        temp = stats1(z).PixelValues; % what labels are around in the cell k?
        temp = unique(temp);          % extract the unique label values
        NSpots(z) = length(temp);     % remove contribution from 0. 
    end
    points(chan).NSpots      = NSpots;
    points(chan).NSpotsinVol = NSpots./cat(1,stats1.Area);


    Label_dots       = bwlabeln(1-image2_shift,6);  % update the dot label matrix
    stats2           = regionprops(Label_dots,tmp_shift,'area','MeanIntensity','centroid','PixelValues');
    DotVolumes       = cat(1,stats2.Area);
    DotCentre        = cat(1,stats2.Centroid);
    MeanDotIntensity = cat(1,stats2.MeanIntensity);

    
    [c,x] = ecdf(MeanDotIntensity);                    % normalizing MeanDotIntensity Distribution
    %figure
    %plot(c,x)                                          % Displays the ecdf plot
    %title('ecdf(MeanDotIntensity) - empirical cum. distr. funct.')
    %ylabel('mean dot intensity')
    %xlabel('summed percentage')
    %hold off
            


end
